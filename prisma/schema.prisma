// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Audit {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  action        String
  data          Json?

  createdById   String
  createdForId  String?
  projectId     String?

  project       Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy     User     @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor    User?    @relation(name: "createdFor", fields: [createdForId], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([createdForId])
  @@index([projectId])
}

model Project {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  settings  Json      @default("{}")
  branches  Branch[]
  access    Access[]
  audits    Audit[]
  invites   ProjectInvite[]
  pullRequests PullRequest[]
}

model ProjectInvite {
  id                  String    @id @default(cuid())
  email               String
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String
  createdAt           DateTime @default(now())
  invitationToken     String
  hashedPassword      String 
  retryCount          Int @default(0)
  invitedById         String?
  role                String @default("developer")
  accepted            Boolean @default(false)

  @@unique(fields: [email, projectId], name: "uniq_email_project")
  @@unique([invitationToken])
  @@index([projectId])
  @@index([invitationToken])
  @@index([email, invitationToken])
}

model Access {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  projectId String
  role      String?   @default("owner")
  active    Boolean   @default(true)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@unique([userId, projectId])
}

model Branch {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  protected   Boolean @default(false)
  status      BranchStatus?

  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  envs        Env[]

  @@index([createdById])
  @@index([projectId])
  @@unique([name, projectId])
  @@index([protected])
}

enum BranchStatus {
  open
  closed
  merged
}

model PullRequest {
  id String @id @default(cuid())
  title String
  prId String
  status PullRequestStatus
  projectId String
  createdById String
  mergedById  String?
  closedById  String?
  baseBranchId String?
  currentBranchId String?
  createdAt DateTime @default(now())
  mergedAt DateTime?
  closedAt DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdBy User @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  mergedBy User? @relation(name: "mergedBy", fields: [mergedById], references: [id], onDelete: Cascade)
  closedBy User? @relation(name: "closedBy", fields: [closedById], references: [id], onDelete: Cascade)

  @@unique([prId, projectId])
  @@index([projectId, status]) 
  @@index([projectId, prId])
}


enum PullRequestStatus {
  open
  merged
  closed
}


model Env {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId  String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@unique([key, branchId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  created_at        Int?
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model SessionHistory {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  ip           String?
  os           Json?    @default("{}")
  geo          Json?
  device       Json?    @default("{}")
  browser      Json?    @default("{}")
  engine       Json?    @default("{}")
  cpu          Json?    @default("{}")
  isBot        Boolean? @default(false)
  mfa          Boolean? @default(false)

  fingerprint  String?
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([id, userId, fingerprint])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  sessionHistories  SessionHistory[]
  access            Access[]
  auditsCreatedBy   Audit[]   @relation(name: "createdBy")
  auditsCreatedFor  Audit[]   @relation(name: "createdFor")
  branchesCreatedBy Branch[]  @relation(name: "createdBy")
  createdPRs PullRequest[] @relation(name: "createdBy")
  mergedPRs PullRequest[] @relation(name: "mergedBy")
  closedPRs PullRequest[] @relation(name: "closedBy")


  // Two factor authentication
  encryptedTwoFactorSecret    Json?
  twoFactorEnabled  Boolean   @default(false)

  marketing         Boolean   @default(true)
  notification      Boolean   @default(true)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
