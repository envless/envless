// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Audit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  action    String
  data      Json?

  createdById  String
  createdForId String?
  projectId    String?

  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy  User     @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor User?    @relation(name: "createdFor", fields: [createdForId], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([createdForId])
  @@index([projectId])
}

model Project {
  id                  String               @id @default(cuid())
  name                String
  slug                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  twoFactorRequired   Boolean              @default(false)
  branches            Branch[]
  access              Access[]
  audits              Audit[]
  invites             ProjectInvite[]
  pullRequests        PullRequest[]
  encryptedProjectKey EncryptedProjectKey?

  @@unique([name, slug])
}

model EncryptedProjectKey {
  id           String @id @default(cuid())
  encryptedKey String

  projectId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model UserPublicKey {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

enum UserRole {
  maintainer
  owner
  developer
  guest
}

model ProjectInvite {
  id                       String   @id @default(cuid())
  project                  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                String
  createdAt                DateTime @default(now())
  invitationToken          String
  invitationTokenExpiresAt DateTime @default(now())
  hashedPassword           String
  retryCount               Int      @default(0)
  invitedById              String?
  access                   Access[]

  @@unique([invitationToken])
  @@index([projectId])
  @@index([invitationToken])
}

enum MembershipStatus {
  active
  pending
  inactive
}

model Access {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  projectId       String
  role            UserRole         @default(guest)
  status          MembershipStatus @default(pending)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectInviteId String?          @unique
  projectInvite   ProjectInvite?   @relation(fields: [projectInviteId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([projectInviteId])
}

model Branch {
  id          String  @id @default(cuid())
  projectId   String
  name        String
  description String?
  createdById String
  protected   Boolean @default(false)

  protectedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  basePRs    PullRequest[] @relation(name: "baseBranch")
  currentPRs PullRequest[] @relation(name: "currentBranch")
  project    Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy  User          @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  secrets    Secret[]


  baseBranchPrHistories PullRequestHistory[] @relation(name: "baseBranchPrHistory")
  currentBranchPrHistories PullRequestHistory[] @relation(name: "currentBranchPrHistory")

  @@unique([name, projectId])
  @@index([createdById])
  @@index([projectId])
  @@index([protected])
}

enum BranchStatus {
  open
  closed
  merged
}

model PullRequest {
  id              String            @id @default(cuid())
  title           String
  prId            Int
  status          PullRequestStatus
  projectId       String
  createdById     String
  mergedById      String?
  closedById      String?
  baseBranchId    String
  currentBranchId String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  mergedAt        DateTime?
  closedAt        DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdBy User  @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  mergedBy  User? @relation(name: "mergedBy", fields: [mergedById], references: [id], onDelete: Cascade)
  closedBy  User? @relation(name: "closedBy", fields: [closedById], references: [id], onDelete: Cascade)

  baseBranch    Branch @relation(name: "baseBranch", fields: [baseBranchId], references: [id], onDelete: Cascade)
  currentBranch Branch @relation(name: "currentBranch", fields: [currentBranchId], references: [id], onDelete: Cascade)

  pullRequestHistories  PullRequestHistory[] @relation(name: "pullRequestHistories")

  @@unique([prId, projectId])
  @@index([createdById])
  @@index([mergedById])
  @@index([closedById])
  @@index([baseBranchId])
  @@index([currentBranchId])
  @@index([createdAt])
  @@index([projectId, status])
  @@index([projectId, prId])
}

enum PullRequestStatus {
  open
  merged
  closed
}

model PullRequestHistory {
  id              String            @id @default(cuid())
  encryptedKey    String
  encryptedValue  String
  baseBranchId    String
  currentBranchId String
  pullRequestId   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  baseBranch    Branch @relation(name: "baseBranchPrHistory", fields: [baseBranchId], references: [id], onDelete: Cascade)
  currentBranch Branch @relation(name: "currentBranchPrHistory", fields: [currentBranchId], references: [id], onDelete: Cascade)

  pullRequest    PullRequest   @relation(name: "pullRequestHistories", fields: [pullRequestId], references: [id], onDelete: Cascade)
}

model Secret {
  id             String   @id @default(cuid())
  encryptedKey   String
  encryptedValue String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId   String
  branchId String
  uuid     String @unique
  branch   Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  secretVersions SecretVersion[] @relation(name: "versions")

  @@index([userId])
  @@index([branchId])
  @@index([uuid])
}

model SecretVersion {
  id             String @id @default(cuid())
  encryptedKey   String
  encryptedValue String
  secretId       String

  secret    Secret   @relation(name: "versions", fields: [secretId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([secretId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  created_at        Int?
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model SessionHistory {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ip      String?
  os      Json?    @default("{}")
  geo     Json?
  device  Json?    @default("{}")
  browser Json?    @default("{}")
  engine  Json?    @default("{}")
  cpu     Json?    @default("{}")
  isBot   Boolean? @default(false)
  mfa     Boolean? @default(false)

  fingerprint String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([id, userId, fingerprint])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  emailVerified     DateTime?
  image             String?
  cliId             String?          @unique
  accounts          Account[]
  sessions          Session[]
  sessionHistories  SessionHistory[]
  access            Access[]
  secrets           Secret[]
  auditsCreatedBy   Audit[]          @relation(name: "createdBy")
  auditsCreatedFor  Audit[]          @relation(name: "createdFor")
  branchesCreatedBy Branch[]         @relation(name: "createdBy")
  createdPRs        PullRequest[]    @relation(name: "createdBy")
  mergedPRs         PullRequest[]    @relation(name: "mergedBy")
  closedPRs         PullRequest[]    @relation(name: "closedBy")
  locked            LockedUser?
  publicKey         UserPublicKey?

  // Two factor authentication
  encryptedTwoFactorSecret Json?
  twoFactorEnabled         Boolean @default(false)
  failedAuthAttempts       Int     @default(0)

  marketing    Boolean @default(true)
  notification Boolean @default(true)
  cli          Cli?
}

// Personal CLI configuration
model Cli {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashedToken String
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([userId, active])
}

model LockedUser {
  id       String   @id @default(cuid())
  userId   String   @unique
  reason   String?
  lockedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
